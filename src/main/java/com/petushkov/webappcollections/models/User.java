package com.petushkov.webappcollections.models;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import io.swagger.annotations.ApiModelProperty;
import lombok.*;
import org.hibernate.Hibernate;
import javax.persistence.*;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import java.util.*;


@Getter
@Setter
@ToString
@RequiredArgsConstructor
@Entity
@Table(name = "users",
        uniqueConstraints = {
                @UniqueConstraint(columnNames = "username"),
                @UniqueConstraint(columnNames = "email")
        })
@JsonIdentityInfo(
        generator = ObjectIdGenerators.PropertyGenerator.class,
        property = "id")
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty(notes = "id of role, generated by DB", example = "1")
    private Long id;

    @NotBlank
    @Size(max = 20)
    @ApiModelProperty(notes = "username of user", example = "ivan")
    private  String username;

    @NotBlank
    @Size(max = 120)
    @ApiModelProperty(notes = "password of user", example = "ivan1234")
    private String password;

    @NotBlank
    @Size(max = 50)
    @ApiModelProperty(notes = "Full name of user", example = "Ivanov Ivan")
    private String fullName;

    @NotBlank
    @Size(max = 50)
    @Email
    @ApiModelProperty(notes = "email of user", example = "ivan@mail.ru")
    private String email;

    @ApiModelProperty(notes = "status of user", example = "active")
    private String status = "active";

    @ApiModelProperty(notes = "user-selected language", example = "en")
    private String language;

    @ApiModelProperty(notes = "user-selected style", example = "dark")
    private String style;


    public User(String username, String password, String fullName, String email) {

        this.username = username;
        this.password = password;
        this.fullName = fullName;
        this.email = email;
    }

    @OneToOne(mappedBy = "user", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @PrimaryKeyJoinColumn
    RefreshToken refreshToken;

    @ManyToMany(fetch = FetchType.LAZY,
            cascade = {CascadeType.DETACH,
                    CascadeType.MERGE,
                    CascadeType.PERSIST,
                    CascadeType.REFRESH})
    @JoinTable(name = "user_roles",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id"))
    @ToString.Exclude
    @ApiModelProperty(notes = "set of user roles", example = "ROLE_USER, ROLE_ADMIN")
    private Set<Role> roles = new HashSet<>();

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "user", cascade = CascadeType.ALL)
    @ToString.Exclude
    @ApiModelProperty(notes = "set of user collections", example = "my books, my records")
    @JsonManagedReference
    private Set<Collection> collections = new HashSet<>();

    public void addRole(Role role) {
        roles.add(role);
    }

    public void deleteRole(Role role) {
        roles.remove(role);
    }

    public void addCollection(Collection collection) {
        collections.add(collection);
    }

    public void deleteCollection(Collection collection) {
        collections.remove(collection);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        User user = (User) o;
        return id != null && Objects.equals(id, user.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}
