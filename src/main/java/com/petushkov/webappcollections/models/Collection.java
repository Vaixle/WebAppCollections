package com.petushkov.webappcollections.models;

import io.swagger.annotations.ApiModelProperty;
import lombok.*;
import org.hibernate.Hibernate;
import org.hibernate.search.mapper.pojo.mapping.definition.annotation.FullTextField;
import org.hibernate.search.mapper.pojo.mapping.definition.annotation.Indexed;
import org.hibernate.search.mapper.pojo.mapping.definition.annotation.IndexedEmbedded;


import javax.persistence.*;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

@Getter
@Setter
@ToString
@RequiredArgsConstructor
@Entity
@Table(name = "collections")
@Indexed
public class Collection {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty(notes = "id of collection, generated by DB", example = "1")
    private Long id;

    @FullTextField
    @ApiModelProperty(notes = "name of collection", example = "r2")
    private String name;

    @FullTextField
    @ApiModelProperty(notes = "topic of collection", example = "records")
    private String topic;

    @FullTextField
    @Column(length = 2040)
    @ApiModelProperty(notes = "description of collection", example = "records")
    private String description;

    @ApiModelProperty(notes = "link of collection", example = "/ivan/collections/r2")
    private String link;

    @ApiModelProperty(notes = "imgLink of collection", example = "http://res.cloudinary.com/vidle/image/upload/v1662301510/azidgcwa6bcgknjcmtpz.jpg")
    private String imgLink;

    @ManyToOne(fetch = FetchType.LAZY,
            cascade = {CascadeType.DETACH,
                    CascadeType.MERGE,
                    CascadeType.MERGE,
                    CascadeType.PERSIST,
                    CascadeType.REFRESH})
    @JoinColumn (name="user_id")
    @ToString.Exclude
    @ApiModelProperty(notes = "object of collection owner, collection owner is user", example = "ivan")
    private User user;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "collection",cascade = CascadeType.ALL)
    @ToString.Exclude
    @IndexedEmbedded
    @ApiModelProperty(notes = "set of collection items", example = "item1, item2, ...")
    private Set<Item> items = new HashSet<>();


    @OneToMany(fetch = FetchType.LAZY, mappedBy = "collection", cascade = CascadeType.ALL)
    @ToString.Exclude
    @ApiModelProperty(notes = "set of field that must be set for each created item", example = "field1, field2, ...")
    private Set<Field> fields = new HashSet<>();


    public void addItem(Item item) {
        items.add(item);
    }

    public void deleteItem(Item item) {
        items.remove(item);
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
        Collection that = (Collection) o;
        return id != null && Objects.equals(id, that.id);
    }

    @Override
    public int hashCode() {
        return getClass().hashCode();
    }
}
